#!/bin/zsh
# /etc/zsh/zshrc ou ~/.zshrc
# Fichier de configuration principal de zsh, lu au lancement des shells interactifs
# (et non des shells d'interpr√©tation de fichier)
# Formation Debian GNU/Linux par Alexis de Lattre
# http://formation-debian.via.ecp.fr/

################
# 1. Les alias #
################

# Gestion du 'ls' : couleur & ne touche pas aux accents
alias ls='ls --classify --tabsize=0 --literal --color=auto --show-control-chars --human-readable'

# Quelques alias pratiques
alias less='less --quiet'
alias df='df --human-readable'
alias du='du --human-readable'

# C++
alias m="make -j12"
alias smi="sudo make install"
alias cm="catkin_make -j12"
alias cmake-clean="make clean ; rm -rf CMakeCache.txt CMakeFiles"
alias cmake-relwithdebinfo="cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo"
alias cmake-release="cmake -DCMAKE_BUILD_TYPE=Release"
alias cmake="cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

#######################################
# 2. Prompt et d√©finition des touches #
#######################################

# Exemple : ma touche HOME, cf  man termcap, est codifiee K1 (upper left
# key  on keyboard)  dans le  /etc/termcap.  En me  referant a  l'entree
# correspondant a mon terminal (par exemple 'linux') dans ce fichier, je
# lis :  K1=\E[1~, c'est la sequence  de caracteres qui sera  envoyee au
# shell. La commande bindkey dit simplement au shell : a chaque fois que
# tu rencontres telle sequence de caractere, tu dois faire telle action.
# La liste des actions est disponible dans "man zshzle".

# Correspondance touches-fonction
bindkey ''    beginning-of-line       # Home
bindkey ''    end-of-line             # End
bindkey ''    delete-char             # Del
bindkey '^[[1~' beginning-of-line       # Home
bindkey '^[[4~' end-of-line             # End
bindkey '[3~' delete-char             # Del
bindkey '[2~' overwrite-mode          # Insert
bindkey '[5~' history-beginning-search-backward # PgUp
bindkey '[6~' history-beginning-search-forward  # PgDn

# Prompt couleur (la couleur n'est pas la m√™me pour le root et
# pour les simples utilisateurs)
if [ "`id -u`" -eq 0 ]; then
  export PS1="%{[36;1m%}%T %{[34m%}%n%{[33m%}@%{[37m%}%m %{[32m%}%~%{[33m%}%#%{[0m%} "
else
  export PS1="%{[36;1m%}%T %{[31m%}%n%{[33m%}@%{[37m%}%m %{[32m%}%~%{[33m%}%#%{[0m%} "
fi

# Prise en charge des touches [d√©but], [fin] et autres
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char


# Titre de la fen√™tre d'un xterm
case $TERM in
   xterm*)
       precmd () {print -Pn "\e]0;%n@%m: %~\a"}
       ;;
esac

# Gestion de la couleur pour 'ls' (exportation de LS_COLORS)
if [ -x /usr/bin/dircolors ]
then
  if [ -r ~/.dir_colors ]
  then
    eval "`dircolors ~/.dir_colors`"
  elif [ -r /etc/dir_colors ]
  then
    eval "`dircolors /etc/dir_colors`"
  else
    eval "`dircolors`"
  fi
fi


###########################################
# 3. Options de zsh (cf 'man zshoptions') #
###########################################

# Je ne veux JAMAIS de beeps
unsetopt beep
unsetopt hist_beep
unsetopt list_beep
# >| doit √™tre utilis√©s pour pouvoir √©craser un fichier d√©j√† existant ;
# le fichier ne sera pas √©cras√© avec '>'
# unsetopt clobber
# Ctrl+D est √©quivalent √† 'logout'
unsetopt ignore_eof
# Affiche le code de sortie si diff√©rent de '0'
setopt print_exit_value
# Demande confirmation pour 'rm *'
unsetopt rm_star_silent
# Correction orthographique des commandes
# D√©sactiv√© car, contrairement √† ce que dit le "man", il essaye de
# corriger les commandes avant de les hasher
#setopt correct
# Si on utilise des jokers dans une liste d'arguments, retire les jokers
# qui ne correspondent √† rien au lieu de donner une erreur
setopt nullglob

# Sch√©mas de compl√©tion

# - Sch√©ma A :
# 1√®re tabulation : compl√®te jusqu'au bout de la partie commune
# 2√®me tabulation : propose une liste de choix
# 3√®me tabulation : compl√®te avec le 1er item de la liste
# 4√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# -> c'est le sch√©ma de compl√©tion par d√©faut de zsh.

# Sch√©ma B :
# 1√®re tabulation : propose une liste de choix et compl√®te avec le 1er item
#                   de la liste
# 2√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# Si vous voulez ce sch√©ma, d√©commentez la ligne suivante :
#setopt menu_complete

# Sch√©ma C :
# 1√®re tabulation : compl√®te jusqu'au bout de la partie commune et
#                   propose une liste de choix
# 2√®me tabulation : compl√®te avec le 1er item de la liste
# 3√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# Ce sch√©ma est le meilleur √† mon go√ªt !
# Si vous voulez ce sch√©ma, d√©commentez la ligne suivante :
#unsetopt list_ambiguous
# (Merci √† Youri van Rietschoten de m'avoir donn√© l'info !)

# Options de compl√©tion
# Quand le dernier caract√®re d'une compl√©tion est '/' et que l'on
# tape 'espace' apr√®s, le '/' est effac√©
setopt auto_remove_slash
# Ne fait pas de compl√©tion sur les fichiers et r√©pertoires cach√©s
unsetopt glob_dots

# Traite les liens symboliques comme il faut
setopt chase_links

# Quand l'utilisateur commence sa commande par '!' pour faire de la
# compl√©tion historique, il n'ex√©cute pas la commande imm√©diatement
# mais il √©crit la commande dans le prompt
setopt hist_verify
# Si la commande est invalide mais correspond au nom d'un sous-r√©pertoire
# ex√©cuter 'cd sous-r√©pertoire'
setopt auto_cd
# L'ex√©cution de "cd" met le r√©pertoire d'o√π l'on vient sur la pile
setopt auto_pushd
# Ignore les doublons dans la pile
setopt pushd_ignore_dups
# N'affiche pas la pile apr√®s un "pushd" ou "popd"
setopt pushd_silent
# "pushd" sans argument = "pushd $HOME"
setopt pushd_to_home

# Les jobs qui tournent en t√¢che de fond sont nic√© √† '0'
unsetopt bg_nice
# N'envoie pas de "HUP" aux jobs qui tourent quand le shell se ferme
unsetopt hup


###############################################
# 4. Param√®tres de l'historique des commandes #
###############################################

# Nombre d'entr√©es dans l'historique
export HISTORY=100000
export SAVEHIST=100000

# Fichier o√π est stock√© l'historique
export HISTFILE=$HOME/.history

# Ajoute l'historique √† la fin de l'ancien fichier
#setopt append_history

# Chaque ligne est ajout√©e dans l'historique √† mesure qu'elle est tap√©e
setopt inc_append_history

# Ne stocke pas  une ligne dans l'historique si elle  est identique √† la
# pr√©c√©dente
setopt hist_ignore_dups

# Supprime les  r√©p√©titions dans le fichier  d'historique, ne conservant
# que la derni√®re occurrence ajout√©e
#setopt hist_ignore_all_dups

# Supprime les  r√©p√©titions dans l'historique lorsqu'il  est plein, mais
# pas avant
setopt hist_expire_dups_first

# N'enregistre  pas plus d'une fois  une m√™me ligne, quelles  que soient
# les options fix√©es pour la session courante
#setopt hist_save_no_dups

# La recherche dans  l'historique avec l'√©diteur de commandes  de zsh ne
# montre  pas  une m√™me  ligne  plus  d'une fois,  m√™me  si  elle a  √©t√©
# enregistr√©e
setopt hist_find_no_dups


###########################################
# 5. Compl√©tion des options des commandes #
###########################################

zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}'
zstyle ':completion:*' max-errors 3 numeric
#zstyle ':completion:*' use-compctl false

autoload -U compinit
compinit

export TERM="xterm-256color"
# Path to your oh-my-zsh installation.
# export BULLETTRAIN_PROMPT_ORDER=(
#     time
#     status
#     context
#     dir
#     screen
#     virtualenv
#     git
#     cmd_exec_time
#   )
BULLETTRAIN_PROMPT_ORDER=(
    time
    status
    context
    dir
    screen
    virtualenv
    git
    cmd_exec_time
  )
export BULLETTRAIN_PROMPT_ORDER
export BULLETTRAIN_RUBY_SHOW=false
export BULLETTRAIN_PROMPT_ADD_NEWLINE=false
if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_CONNECTION" ]]; then
  export BULLETTRAIN_IS_SSH_CLIENT=true
fi
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="bullet-train"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git mercurial command-not-found python pip github gnu-utils zsh-autosuggestions)

# User configuration

source $ZSH/oh-my-zsh.sh

bindkey "\033[1~" beginning-of-line
bindkey "\033[4~" end-of-line

alias dinauz='ssh pbs@dinauz.org'

if [ "$(lsb_release -r -s)" = "16.04" ]; then
  echo "Using Ubuntu 16.04"
  #echo "Activating python virtualenv ~/src16/python_venv/bin/activate"
  #source ~/src16/python_venv/bin/activate
  echo "Setting up ros kinetic environment"
  source /opt/ros/kinetic/setup.zsh
  source $HOME/src16/catkin_ws/devel/setup.zsh
fi

if [ "$(lsb_release -r -s)" = "14.04" ]; then
  echo "Using Ubuntu 14.04"
  echo "Setting up ros indigo environment"
  source /opt/ros/indigo/setup.zsh
  source $HOME/catkin_ws/devel/setup.zsh
  source $HOME/catkin_plugins/devel/setup.zsh
fi

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PYTHONPATH=/usr/lib/python2.7/site-packages:$PYTHONPATH

# CUDA
export PATH=/usr/local/bin:/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Local IP adress
export IP=$(ifconfig eth0 | grep "inet addr" | sed 's/.*inet addr:\(.*\)  Bcast.*/\1/g')

ros-local()
{
  export ROS_IP=127.0.0.1
  export ROS_MASTER_URI=http://localhost:11311
  export ROS_SYMBOL='\u2609'
  update_prompt
}

ros-hrp2()
{
  export ROS_IP=$IP
  export ROS_MASTER_URI=http://hrp2012v:11311
  export ROS_SYMBOL='\u2708'
  update_prompt
}

ros_glados()
{
  export ROS_IP=$IP
  export ROS_MASTER_URI=http://glados:11311
}

hrp4_vicon_network()
{
  sudo ifconfig eth0 10.4.5.42 netmask 255.255.255.0
  sudo ifconfig eth0:1 192.168.10.42 netmask 255.255.254.0
}

update_prompt()
{
  export BULLETTRAIN_CUSTOM_MSG="($ROS_SYMBOL)"
}

export ROS_PARALLEL_JOBS="-j12"
alias use_clang="export CC=clang; export CXX=clang++; export CCC_CXX=clang++"
alias use_gcc="export CC=gcc; export CXX=g++"

alias make='make -j12'
export LC_ALL=en_US.UTF-8
export LC_NUMERIC="en_US.UTF-8"

alias bat_power='upower -i /org/freedesktop/UPower/devices/battery_BAT1|grep percent'
alias bat_power_full='upower -i /org/freedesktop/UPower/devices/battery_BAT1'

export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus

alias stop="echo STOP TYPING stop"

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# Python
export WORKON_HOME=~/src16/virtualenv
source /usr/local/bin/virtualenvwrapper.sh

# Ruby
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"

# Editor
export EDITOR=nvim

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Ninja
alias n='ninja'
alias nn='ninja && sudo ninja install && sudo chown -R $USER .ninja_deps .ninja_log'

# ccache
export PATH=/usr/lib/ccache:$PATH

# launch qcachegrind with the latest callgrind.out.* file
alias qcachegrind-latest='ls -t callgrind.out.*|head -n 1|xargs qcachegrind'
alias massif-visualizer-latest='ls -t massif.out.*|head -n 1|xargs massif-visualizer'

# MATLAB
export PATH=$HOME/MATLAB/R2018a/bin:$PATH
export PYTHONPATH=/usr/local/lib/python2.7/dist-packages/hrpsys:$PYTHONPATH

# NAG license
export NAG_KUSARI_FILE=150.29.144.85:

# knitro license
export ARTELYS_LICENSE_NETWORK_ADDR=150.29.144.85

# MPD port
export MPD_PORT=52000

alias choreonoidhrp4='cd /usr/local/share/hrpsys/samples/HRP4LIRMM/ && choreonoid HRP4LIRMM_gui.cnoid; cd -'

ros-local

